// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.29.4
// source: domain/messaging/telemetryData.proto

package messaging

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             float32                `protobuf:"fixed32,1,opt,name=X,proto3" json:"X,omitempty"`
	Y             float32                `protobuf:"fixed32,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z             float32                `protobuf:"fixed32,3,opt,name=Z,proto3" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector) Reset() {
	*x = Vector{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{0}
}

func (x *Vector) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vector) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vector) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type WheelsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FL            float32                `protobuf:"fixed32,1,opt,name=FL,proto3" json:"FL,omitempty"`
	FR            float32                `protobuf:"fixed32,2,opt,name=FR,proto3" json:"FR,omitempty"`
	RL            float32                `protobuf:"fixed32,3,opt,name=RL,proto3" json:"RL,omitempty"`
	RR            float32                `protobuf:"fixed32,4,opt,name=RR,proto3" json:"RR,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WheelsData) Reset() {
	*x = WheelsData{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WheelsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WheelsData) ProtoMessage() {}

func (x *WheelsData) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WheelsData.ProtoReflect.Descriptor instead.
func (*WheelsData) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{1}
}

func (x *WheelsData) GetFL() float32 {
	if x != nil {
		return x.FL
	}
	return 0
}

func (x *WheelsData) GetFR() float32 {
	if x != nil {
		return x.FR
	}
	return 0
}

func (x *WheelsData) GetRL() float32 {
	if x != nil {
		return x.RL
	}
	return 0
}

func (x *WheelsData) GetRR() float32 {
	if x != nil {
		return x.RR
	}
	return 0
}

type CarInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Ordinal          int32                  `protobuf:"varint,1,opt,name=Ordinal,proto3" json:"Ordinal,omitempty"`
	Class            int32                  `protobuf:"varint,2,opt,name=Class,proto3" json:"Class,omitempty"`
	PerformanceIndex int32                  `protobuf:"varint,3,opt,name=PerformanceIndex,proto3" json:"PerformanceIndex,omitempty"`
	DrivetrainType   int32                  `protobuf:"varint,4,opt,name=DrivetrainType,proto3" json:"DrivetrainType,omitempty"`
	NumCylinders     int32                  `protobuf:"varint,5,opt,name=NumCylinders,proto3" json:"NumCylinders,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CarInfo) Reset() {
	*x = CarInfo{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarInfo) ProtoMessage() {}

func (x *CarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarInfo.ProtoReflect.Descriptor instead.
func (*CarInfo) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{2}
}

func (x *CarInfo) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

func (x *CarInfo) GetClass() int32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *CarInfo) GetPerformanceIndex() int32 {
	if x != nil {
		return x.PerformanceIndex
	}
	return 0
}

func (x *CarInfo) GetDrivetrainType() int32 {
	if x != nil {
		return x.DrivetrainType
	}
	return 0
}

func (x *CarInfo) GetNumCylinders() int32 {
	if x != nil {
		return x.NumCylinders
	}
	return 0
}

type RaceInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	DistanceTraveled float32                `protobuf:"fixed32,1,opt,name=DistanceTraveled,proto3" json:"DistanceTraveled,omitempty"`
	BestLap          float32                `protobuf:"fixed32,2,opt,name=BestLap,proto3" json:"BestLap,omitempty"`
	LastLap          float32                `protobuf:"fixed32,3,opt,name=LastLap,proto3" json:"LastLap,omitempty"`
	CurrentLap       float32                `protobuf:"fixed32,4,opt,name=CurrentLap,proto3" json:"CurrentLap,omitempty"`
	CurrentRaceTime  float32                `protobuf:"fixed32,5,opt,name=CurrentRaceTime,proto3" json:"CurrentRaceTime,omitempty"`
	LapNumber        uint32                 `protobuf:"varint,6,opt,name=LapNumber,proto3" json:"LapNumber,omitempty"`
	RacePosition     uint32                 `protobuf:"varint,7,opt,name=RacePosition,proto3" json:"RacePosition,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RaceInfo) Reset() {
	*x = RaceInfo{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceInfo) ProtoMessage() {}

func (x *RaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceInfo.ProtoReflect.Descriptor instead.
func (*RaceInfo) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{3}
}

func (x *RaceInfo) GetDistanceTraveled() float32 {
	if x != nil {
		return x.DistanceTraveled
	}
	return 0
}

func (x *RaceInfo) GetBestLap() float32 {
	if x != nil {
		return x.BestLap
	}
	return 0
}

func (x *RaceInfo) GetLastLap() float32 {
	if x != nil {
		return x.LastLap
	}
	return 0
}

func (x *RaceInfo) GetCurrentLap() float32 {
	if x != nil {
		return x.CurrentLap
	}
	return 0
}

func (x *RaceInfo) GetCurrentRaceTime() float32 {
	if x != nil {
		return x.CurrentRaceTime
	}
	return 0
}

func (x *RaceInfo) GetLapNumber() uint32 {
	if x != nil {
		return x.LapNumber
	}
	return 0
}

func (x *RaceInfo) GetRacePosition() uint32 {
	if x != nil {
		return x.RacePosition
	}
	return 0
}

type Rpm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Max           float32                `protobuf:"fixed32,1,opt,name=Max,proto3" json:"Max,omitempty"`
	Current       float32                `protobuf:"fixed32,2,opt,name=Current,proto3" json:"Current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rpm) Reset() {
	*x = Rpm{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rpm) ProtoMessage() {}

func (x *Rpm) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rpm.ProtoReflect.Descriptor instead.
func (*Rpm) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{4}
}

func (x *Rpm) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Rpm) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

type Controls struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accel         uint32                 `protobuf:"varint,1,opt,name=Accel,proto3" json:"Accel,omitempty"`
	Brake         uint32                 `protobuf:"varint,2,opt,name=Brake,proto3" json:"Brake,omitempty"`
	Clutch        uint32                 `protobuf:"varint,3,opt,name=Clutch,proto3" json:"Clutch,omitempty"`
	Handbrake     uint32                 `protobuf:"varint,4,opt,name=Handbrake,proto3" json:"Handbrake,omitempty"`
	Gear          uint32                 `protobuf:"varint,5,opt,name=Gear,proto3" json:"Gear,omitempty"`
	Steer         uint32                 `protobuf:"varint,6,opt,name=Steer,proto3" json:"Steer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Controls) Reset() {
	*x = Controls{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Controls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Controls) ProtoMessage() {}

func (x *Controls) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Controls.ProtoReflect.Descriptor instead.
func (*Controls) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{5}
}

func (x *Controls) GetAccel() uint32 {
	if x != nil {
		return x.Accel
	}
	return 0
}

func (x *Controls) GetBrake() uint32 {
	if x != nil {
		return x.Brake
	}
	return 0
}

func (x *Controls) GetClutch() uint32 {
	if x != nil {
		return x.Clutch
	}
	return 0
}

func (x *Controls) GetHandbrake() uint32 {
	if x != nil {
		return x.Handbrake
	}
	return 0
}

func (x *Controls) GetGear() uint32 {
	if x != nil {
		return x.Gear
	}
	return 0
}

func (x *Controls) GetSteer() uint32 {
	if x != nil {
		return x.Steer
	}
	return 0
}

type TelemetryData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsRaceOn      int32                  `protobuf:"varint,1,opt,name=IsRaceOn,proto3" json:"IsRaceOn,omitempty"`
	Timestamp     uint32                 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Rpm           *Rpm                   `protobuf:"bytes,3,opt,name=Rpm,proto3" json:"Rpm,omitempty"`
	CarInfo       *CarInfo               `protobuf:"bytes,4,opt,name=CarInfo,proto3" json:"CarInfo,omitempty"`
	Position      *Vector                `protobuf:"bytes,5,opt,name=Position,proto3" json:"Position,omitempty"`
	Rotation      *Vector                `protobuf:"bytes,6,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	Speed         float32                `protobuf:"fixed32,7,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Power         float32                `protobuf:"fixed32,8,opt,name=Power,proto3" json:"Power,omitempty"`
	Torque        float32                `protobuf:"fixed32,9,opt,name=Torque,proto3" json:"Torque,omitempty"`
	Boost         float32                `protobuf:"fixed32,10,opt,name=Boost,proto3" json:"Boost,omitempty"`
	Fuel          float32                `protobuf:"fixed32,11,opt,name=Fuel,proto3" json:"Fuel,omitempty"`
	TireTemp      *WheelsData            `protobuf:"bytes,12,opt,name=TireTemp,proto3" json:"TireTemp,omitempty"`
	RaceInfo      *RaceInfo              `protobuf:"bytes,13,opt,name=RaceInfo,proto3" json:"RaceInfo,omitempty"`
	Controls      *Controls              `protobuf:"bytes,14,opt,name=Controls,proto3" json:"Controls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryData) Reset() {
	*x = TelemetryData{}
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryData) ProtoMessage() {}

func (x *TelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_domain_messaging_telemetryData_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryData.ProtoReflect.Descriptor instead.
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return file_domain_messaging_telemetryData_proto_rawDescGZIP(), []int{6}
}

func (x *TelemetryData) GetIsRaceOn() int32 {
	if x != nil {
		return x.IsRaceOn
	}
	return 0
}

func (x *TelemetryData) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TelemetryData) GetRpm() *Rpm {
	if x != nil {
		return x.Rpm
	}
	return nil
}

func (x *TelemetryData) GetCarInfo() *CarInfo {
	if x != nil {
		return x.CarInfo
	}
	return nil
}

func (x *TelemetryData) GetPosition() *Vector {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *TelemetryData) GetRotation() *Vector {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *TelemetryData) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *TelemetryData) GetPower() float32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *TelemetryData) GetTorque() float32 {
	if x != nil {
		return x.Torque
	}
	return 0
}

func (x *TelemetryData) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (x *TelemetryData) GetFuel() float32 {
	if x != nil {
		return x.Fuel
	}
	return 0
}

func (x *TelemetryData) GetTireTemp() *WheelsData {
	if x != nil {
		return x.TireTemp
	}
	return nil
}

func (x *TelemetryData) GetRaceInfo() *RaceInfo {
	if x != nil {
		return x.RaceInfo
	}
	return nil
}

func (x *TelemetryData) GetControls() *Controls {
	if x != nil {
		return x.Controls
	}
	return nil
}

var File_domain_messaging_telemetryData_proto protoreflect.FileDescriptor

const file_domain_messaging_telemetryData_proto_rawDesc = "" +
	"\n" +
	"$domain/messaging/telemetryData.proto\x12\tmessaging\"2\n" +
	"\x06Vector\x12\f\n" +
	"\x01X\x18\x01 \x01(\x02R\x01X\x12\f\n" +
	"\x01Y\x18\x02 \x01(\x02R\x01Y\x12\f\n" +
	"\x01Z\x18\x03 \x01(\x02R\x01Z\"L\n" +
	"\n" +
	"WheelsData\x12\x0e\n" +
	"\x02FL\x18\x01 \x01(\x02R\x02FL\x12\x0e\n" +
	"\x02FR\x18\x02 \x01(\x02R\x02FR\x12\x0e\n" +
	"\x02RL\x18\x03 \x01(\x02R\x02RL\x12\x0e\n" +
	"\x02RR\x18\x04 \x01(\x02R\x02RR\"\xb1\x01\n" +
	"\aCarInfo\x12\x18\n" +
	"\aOrdinal\x18\x01 \x01(\x05R\aOrdinal\x12\x14\n" +
	"\x05Class\x18\x02 \x01(\x05R\x05Class\x12*\n" +
	"\x10PerformanceIndex\x18\x03 \x01(\x05R\x10PerformanceIndex\x12&\n" +
	"\x0eDrivetrainType\x18\x04 \x01(\x05R\x0eDrivetrainType\x12\"\n" +
	"\fNumCylinders\x18\x05 \x01(\x05R\fNumCylinders\"\xf6\x01\n" +
	"\bRaceInfo\x12*\n" +
	"\x10DistanceTraveled\x18\x01 \x01(\x02R\x10DistanceTraveled\x12\x18\n" +
	"\aBestLap\x18\x02 \x01(\x02R\aBestLap\x12\x18\n" +
	"\aLastLap\x18\x03 \x01(\x02R\aLastLap\x12\x1e\n" +
	"\n" +
	"CurrentLap\x18\x04 \x01(\x02R\n" +
	"CurrentLap\x12(\n" +
	"\x0fCurrentRaceTime\x18\x05 \x01(\x02R\x0fCurrentRaceTime\x12\x1c\n" +
	"\tLapNumber\x18\x06 \x01(\rR\tLapNumber\x12\"\n" +
	"\fRacePosition\x18\a \x01(\rR\fRacePosition\"1\n" +
	"\x03Rpm\x12\x10\n" +
	"\x03Max\x18\x01 \x01(\x02R\x03Max\x12\x18\n" +
	"\aCurrent\x18\x02 \x01(\x02R\aCurrent\"\x96\x01\n" +
	"\bControls\x12\x14\n" +
	"\x05Accel\x18\x01 \x01(\rR\x05Accel\x12\x14\n" +
	"\x05Brake\x18\x02 \x01(\rR\x05Brake\x12\x16\n" +
	"\x06Clutch\x18\x03 \x01(\rR\x06Clutch\x12\x1c\n" +
	"\tHandbrake\x18\x04 \x01(\rR\tHandbrake\x12\x12\n" +
	"\x04Gear\x18\x05 \x01(\rR\x04Gear\x12\x14\n" +
	"\x05Steer\x18\x06 \x01(\rR\x05Steer\"\xfa\x03\n" +
	"\rTelemetryData\x12\x1a\n" +
	"\bIsRaceOn\x18\x01 \x01(\x05R\bIsRaceOn\x12\x1c\n" +
	"\tTimestamp\x18\x02 \x01(\rR\tTimestamp\x12 \n" +
	"\x03Rpm\x18\x03 \x01(\v2\x0e.messaging.RpmR\x03Rpm\x12,\n" +
	"\aCarInfo\x18\x04 \x01(\v2\x12.messaging.CarInfoR\aCarInfo\x12-\n" +
	"\bPosition\x18\x05 \x01(\v2\x11.messaging.VectorR\bPosition\x12-\n" +
	"\bRotation\x18\x06 \x01(\v2\x11.messaging.VectorR\bRotation\x12\x14\n" +
	"\x05Speed\x18\a \x01(\x02R\x05Speed\x12\x14\n" +
	"\x05Power\x18\b \x01(\x02R\x05Power\x12\x16\n" +
	"\x06Torque\x18\t \x01(\x02R\x06Torque\x12\x14\n" +
	"\x05Boost\x18\n" +
	" \x01(\x02R\x05Boost\x12\x12\n" +
	"\x04Fuel\x18\v \x01(\x02R\x04Fuel\x121\n" +
	"\bTireTemp\x18\f \x01(\v2\x15.messaging.WheelsDataR\bTireTemp\x12/\n" +
	"\bRaceInfo\x18\r \x01(\v2\x13.messaging.RaceInfoR\bRaceInfo\x12/\n" +
	"\bControls\x18\x0e \x01(\v2\x13.messaging.ControlsR\bControlsBAZ?github.com/P-Tesch/telemetry-app/normalization/domain/messagingb\x06proto3"

var (
	file_domain_messaging_telemetryData_proto_rawDescOnce sync.Once
	file_domain_messaging_telemetryData_proto_rawDescData []byte
)

func file_domain_messaging_telemetryData_proto_rawDescGZIP() []byte {
	file_domain_messaging_telemetryData_proto_rawDescOnce.Do(func() {
		file_domain_messaging_telemetryData_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_domain_messaging_telemetryData_proto_rawDesc), len(file_domain_messaging_telemetryData_proto_rawDesc)))
	})
	return file_domain_messaging_telemetryData_proto_rawDescData
}

var file_domain_messaging_telemetryData_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_domain_messaging_telemetryData_proto_goTypes = []any{
	(*Vector)(nil),        // 0: messaging.Vector
	(*WheelsData)(nil),    // 1: messaging.WheelsData
	(*CarInfo)(nil),       // 2: messaging.CarInfo
	(*RaceInfo)(nil),      // 3: messaging.RaceInfo
	(*Rpm)(nil),           // 4: messaging.Rpm
	(*Controls)(nil),      // 5: messaging.Controls
	(*TelemetryData)(nil), // 6: messaging.TelemetryData
}
var file_domain_messaging_telemetryData_proto_depIdxs = []int32{
	4, // 0: messaging.TelemetryData.Rpm:type_name -> messaging.Rpm
	2, // 1: messaging.TelemetryData.CarInfo:type_name -> messaging.CarInfo
	0, // 2: messaging.TelemetryData.Position:type_name -> messaging.Vector
	0, // 3: messaging.TelemetryData.Rotation:type_name -> messaging.Vector
	1, // 4: messaging.TelemetryData.TireTemp:type_name -> messaging.WheelsData
	3, // 5: messaging.TelemetryData.RaceInfo:type_name -> messaging.RaceInfo
	5, // 6: messaging.TelemetryData.Controls:type_name -> messaging.Controls
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_domain_messaging_telemetryData_proto_init() }
func file_domain_messaging_telemetryData_proto_init() {
	if File_domain_messaging_telemetryData_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_domain_messaging_telemetryData_proto_rawDesc), len(file_domain_messaging_telemetryData_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_domain_messaging_telemetryData_proto_goTypes,
		DependencyIndexes: file_domain_messaging_telemetryData_proto_depIdxs,
		MessageInfos:      file_domain_messaging_telemetryData_proto_msgTypes,
	}.Build()
	File_domain_messaging_telemetryData_proto = out.File
	file_domain_messaging_telemetryData_proto_goTypes = nil
	file_domain_messaging_telemetryData_proto_depIdxs = nil
}
